syntax = "proto2";
package protos;

import "easy_rec/python/protos/dnn.proto";
import "easy_rec/python/protos/fm.proto";
import "easy_rec/python/protos/layer.proto";
import "easy_rec/python/protos/fibinet.proto";
import "easy_rec/python/protos/masknet.proto";


message SequenceLayer {
    optional MLP mlp = 1;
}

message Lambda {
    required string expression = 1;
}

message Operator {
    oneof Op {
        MLP mlp = 102;
        PeriodicEmbedding periodic_embedding = 103;
        AutoDisEmbedding auto_dis_embedding = 104;
        SequenceLayer sequence_encoder = 105;
        HighWayTower highway = 106;
        MaskNet masknet = 107;
        SENet senet = 108;
        FiBiNetTower fibinet = 109;
        FM fm = 110;
        Concatenate concat = 111;
        Reshape reshape = 112;
        Add add = 113;
        Dot dot = 114;
        Lambda Lambda = 115;
        OpChain chain = 116;
    }
}

message OpChain {
    repeated Operator ops = 1;
}

message Block {
    required string name = 1;
    // the input names of feature groups or other blocks
    repeated string inputs = 2;
    optional int32 input_concat_axis = 3 [default = -1];
    optional string extra_input_fn = 4;
    oneof layer {
        InputLayer input_layer = 101;
        MLP mlp = 102;
        PeriodicEmbedding periodic_embedding = 103;
        AutoDisEmbedding auto_dis_embedding = 104;
        SequenceLayer sequence_encoder = 105;
        HighWayTower highway = 106;
        MaskNet masknet = 107;
        SENet senet = 108;
        FiBiNetTower fibinet = 109;
        FM fm = 110;
        Concatenate concat = 111;
        Reshape reshape = 112;
        Add add = 113;
        Dot dot = 114;
        Lambda Lambda = 115;
        OpChain chain = 116;
    }
}

message BackboneTower {
    repeated Block blocks = 1;
    repeated string concat_blocks = 2;
    optional MLP top_mlp = 3;
}
